{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue-Medium;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fmodern\fcharset0 Courier;\f4\fnil\fcharset0 HelveticaNeue-Italic;\f5\fnil\fcharset0 HelveticaNeue-Bold;
\f6\fnil\fcharset0 Menlo-Regular;\f7\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;\red255\green255\blue255;\red224\green0\blue81;
\red67\green91\blue103;\red29\green38\blue42;\red245\green247\blue249;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c91373\c11765\c38824;
\cssrgb\c32941\c43137\c47843;\cssrgb\c14902\c19608\c21961;\cssrgb\c96863\c97647\c98039;\cssrgb\c0\c0\c0\c65098;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 329.\'a0Longest Increasing Path in a Matrix\cb1 \

\b0\fs26 \cf4 \cb3 \strokec4 Hard\cb1 \
\pard\pardeftab720\qc\partightenfactor0

\f2\fs24 \cf5 \strokec5 \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf6 \cb3 \strokec6 Given an\'a0
\f3\fs26 \cf5 \cb7 \strokec5 m x n
\f2\fs28 \cf6 \cb3 \strokec6 \'a0integers\'a0
\f3\fs26 \cf5 \cb7 \strokec5 matrix
\f2\fs28 \cf6 \cb3 \strokec6 , return\'a0
\f4\i the length of the longest increasing path in\'a0
\f3\i0\fs26 \cf5 \cb7 \strokec5 matrix
\f2\fs28 \cf6 \cb3 \strokec6 .\cb1 \
\cb3 From each cell, you can either move in four directions: left, right, up, or down. You\'a0
\f5\b may not
\f2\b0 \'a0move\'a0
\f5\b diagonally
\f2\b0 \'a0or move\'a0
\f5\b outside the boundary
\f2\b0 \'a0(i.e., wrap-around is not allowed).\cb1 \
\cb3 \'a0\cb1 \

\f5\b \cb3 Example 1:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 {{\NeXTGraphic grid1.jpg \width4840 \height4840 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f6\fs26 \cb7 \

\f7\b Input:
\f6\b0  matrix = [[9,9,4],[6,6,8],[2,1,1]]\

\f7\b Output:
\f6\b0  4\

\f7\b Explanation:
\f6\b0  The longest increasing path is [1, 2, 6, 9].\
\pard\pardeftab720\sa280\partightenfactor0

\f5\b\fs28 \cf6 \cb3 Example 2:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 {{\NeXTGraphic tmp-grid.jpg \width5060 \height5060 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0

\f6\fs26 \cf6 \cb7 \

\f7\b Input:
\f6\b0  matrix = [[3,4,5],[3,2,6],[2,2,1]]\

\f7\b Output:
\f6\b0  4\

\f7\b Explanation: 
\f6\b0 The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\
\pard\pardeftab720\sa280\partightenfactor0

\f5\b\fs28 \cf6 \cb3 Example 3:
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f7\b\fs26 \cf6 \cb7 Input:
\f6\b0  matrix = [[1]]\

\f7\b Output:
\f6\b0  1\
\pard\pardeftab720\sa280\partightenfactor0

\f2\fs28 \cf6 \cb3 \'a0\cb1 \

\f5\b \cb3 Constraints:
\f2\b0 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f3\fs26 \cf5 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 m == matrix.length
\f2\fs28 \cf6 \cb1 \strokec6 \
\ls1\ilvl0
\f3\fs26 \cf5 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 n == matrix[i].length
\f2\fs28 \cf6 \cb1 \strokec6 \
\ls1\ilvl0
\f3\fs26 \cf5 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 1 <= m, n <= 200
\f2\fs28 \cf6 \cb1 \strokec6 \
\ls1\ilvl0
\f3\fs26 \cf5 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 0 <= matrix[i][j] <= 2
\fs19\fsmilli9750 31
\fs26 \'a0- 1
\f2\fs28 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\partightenfactor0

\fs26 \cf8 \strokec8 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
class Solution \{\
    //indicates left and right neighbours for x = 0, \{1,0\},\{-1,0\}, \
//indicates up and down neighbours for y = 0, \{0,1\},\{0,-1\}\
    int [][] DIRECTIONS = \{\{1,0\},\{-1,0\},\{0,1\},\{0,-1\}\};\
    public int longestIncreasingPath(int[][] matrix) \{\
        //check if matrix is null or has no elements\
        if(matrix == null && matrix.length == 0) return 0;\
        \
        int max = 0;\
        //calculate length of existing matrix\
        int n = matrix.length, m = matrix[0].length;\
        int[][] cache = new int[n][m];\
\
        \
        for(int i= 0; i<n; i++)\
        \{\
            for(int j=0; j<m; j++)\
            \{\
                //recursive call to check and compare the current value with all 4 neighbours\
                int longest = longestPath(matrix, cache, n,m,i,j);\
                max = Math.max(max,longest);\
            \}\
        \}\
        return max;\
        \
    \}\
    \
    int longestPath(int[][] matrix, int[][] cache, int n, int m, int i, int j)\
    \{\
        // to disable brute force attack method and so that we don't revisit the already visited member in matrix\
        if(cache[i][j] > 0) return cache[i][j];\
        \
        int max = 0;\
        for(int[] directions: DIRECTIONS)\
        \{\
            // calculate index for neighbours\
            int x = directions[0] + i, y = directions[1] + j;\
            //compare the current value with neighbours and accordingly enter into the recursive condition to perform dfs\
            if(x > -1 && y > -1 && x<n && y<m && matrix[i][j] > matrix[x][y])\
            \{\
                int longest = longestPath(matrix, cache, n,m,x,y);\
                max = Math.max(max,longest);\
            \}\
        \}\
        // calculate dfs\
        cache[i][j] = max + 1;\
        return cache[i][j];\
    \}\
    \
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
Time complexity : o(n*m)\
Space complexity : o(n*m)}