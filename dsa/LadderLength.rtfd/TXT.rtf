{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Bold;
\f3\fmodern\fcharset0 Courier;\f4\fnil\fcharset0 HelveticaNeue-Italic;\f5\fnil\fcharset0 HelveticaNeue-BoldItalic;
\f6\fnil\fcharset0 Menlo-Bold;\f7\fnil\fcharset0 Menlo-Regular;\f8\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red29\green38\blue42;\red255\green255\blue255;\red67\green91\blue103;
\red245\green247\blue249;}
{\*\expandedcolortbl;;\cssrgb\c14902\c19608\c21961;\cssrgb\c100000\c100000\c100000;\cssrgb\c32941\c43137\c47843;
\cssrgb\c96863\c97647\c98039;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\pardeftab720\sa280\partightenfactor0

\f1\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A\'a0
\f2\b transformation sequence
\f1\b0 \'a0from word\'a0
\f3\fs26 \cf4 \cb5 \strokec4 beginWord
\f1\fs28 \cf2 \cb3 \strokec2 \'a0to word\'a0
\f3\fs26 \cf4 \cb5 \strokec4 endWord
\f1\fs28 \cf2 \cb3 \strokec2 \'a0using a dictionary\'a0
\f3\fs26 \cf4 \cb5 \strokec4 wordList
\f1\fs28 \cf2 \cb3 \strokec2 \'a0is a sequence of words\'a0
\f3\fs26 \cf4 \cb5 \strokec4 beginWord -> s
\fs19\fsmilli9750 1
\fs26 \'a0-> s
\fs19\fsmilli9750 2
\fs26 \'a0-> ... -> s
\fs19\fsmilli9750 k
\f1\fs28 \cf2 \cb3 \strokec2 \'a0such that:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Every adjacent pair of words differs by a single letter.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Every\'a0
\f3\fs26 \cf4 \cb5 \strokec4 s
\fs19\fsmilli9750 i
\f1\fs28 \cf2 \cb3 \strokec2 \'a0for\'a0
\f3\fs26 \cf4 \cb5 \strokec4 1 <= i <= k
\f1\fs28 \cf2 \cb3 \strokec2 \'a0is in\'a0
\f3\fs26 \cf4 \cb5 \strokec4 wordList
\f1\fs28 \cf2 \cb3 \strokec2 . Note that\'a0
\f3\fs26 \cf4 \cb5 \strokec4 beginWord
\f1\fs28 \cf2 \cb3 \strokec2 \'a0does not need to be in\'a0
\f3\fs26 \cf4 \cb5 \strokec4 wordList
\f1\fs28 \cf2 \cb3 \strokec2 .\cb1 \
\ls1\ilvl0
\f3\fs26 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 s
\fs19\fsmilli9750 k
\fs26 \'a0== endWord
\f1\fs28 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sa280\partightenfactor0
\cf2 \cb3 Given two words,\'a0
\f3\fs26 \cf4 \cb5 \strokec4 beginWord
\f1\fs28 \cf2 \cb3 \strokec2 \'a0and\'a0
\f3\fs26 \cf4 \cb5 \strokec4 endWord
\f1\fs28 \cf2 \cb3 \strokec2 , and a dictionary\'a0
\f3\fs26 \cf4 \cb5 \strokec4 wordList
\f1\fs28 \cf2 \cb3 \strokec2 , return\'a0
\f4\i the\'a0
\f5\b number of words
\f4\b0 \'a0in the\'a0
\f5\b shortest transformation sequence
\f4\b0 \'a0from
\f1\i0 \'a0
\f3\fs26 \cf4 \cb5 \strokec4 beginWord
\f1\fs28 \cf2 \cb3 \strokec2 \'a0
\f4\i to
\f1\i0 \'a0
\f3\fs26 \cf4 \cb5 \strokec4 endWord
\f4\i\fs28 \cf2 \cb3 \strokec2 , or\'a0
\f3\i0\fs26 \cf4 \cb5 \strokec4 0
\f4\i\fs28 \cf2 \cb3 \strokec2 \'a0if no such sequence exists.
\f1\i0 \
\'a0\

\f2\b Example 1:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f6\b\fs26 \cf2 \cb5 Input:
\f7\b0  beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]\

\f6\b Output:
\f7\b0  5\

\f6\b Explanation:
\f7\b0  One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs28 \cf2 \cb3 Example 2:
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\f6\b\fs26 \cf2 \cb5 Input:
\f7\b0  beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]\

\f6\b Output:
\f7\b0  0\

\f6\b Explanation:
\f7\b0  The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.\
\pard\pardeftab720\sa280\partightenfactor0

\f1\fs28 \cf2 \cb3 \'a0\

\f2\b Constraints:
\f1\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f3\fs26 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 1 <= beginWord.length <= 10
\f1\fs28 \cf2 \cb1 \strokec2 \
\ls2\ilvl0
\f3\fs26 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 endWord.length == beginWord.length
\f1\fs28 \cf2 \cb1 \strokec2 \
\ls2\ilvl0
\f3\fs26 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 1 <= wordList.length <= 5000
\f1\fs28 \cf2 \cb1 \strokec2 \
\ls2\ilvl0
\f3\fs26 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 wordList[i].length == beginWord.length
\f1\fs28 \cf2 \cb1 \strokec2 \
\ls2\ilvl0
\f3\fs26 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 beginWord
\f1\fs28 \cf2 \cb3 \strokec2 ,\'a0
\f3\fs26 \cf4 \cb5 \strokec4 endWord
\f1\fs28 \cf2 \cb3 \strokec2 , and\'a0
\f3\fs26 \cf4 \cb5 \strokec4 wordList[i]
\f1\fs28 \cf2 \cb3 \strokec2 \'a0consist of lowercase English letters.\cb1 \
\ls2\ilvl0
\f3\fs26 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 beginWord != endWord
\f1\fs28 \cf2 \cb1 \strokec2 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 All the words in\'a0
\f3\fs26 \cf4 \cb5 \strokec4 wordList
\f1\fs28 \cf2 \cb3 \strokec2 \'a0are\'a0
\f2\b unique
\f1\b0 .\cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \

\f8\b Youtube link: https://www.youtube.com/watch?v=5iFZP-f40iI\
\
Description : https://leetcode.com/problems/word-ladder/discuss/1764371/A-very-highly-detailed-EXPLANATION\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f0\b0 \
\
class Solution \{\
    public int ladderLength(String beginWord, String endWord, List<String> wordList) \{\
        Set<String> set = new HashSet<>(wordList);\
        // add wordlist to set to check if the endword exists\
        if(!set.contains(endWord)) return 0;\
        \
        //create a queue that will be used to add the words to the list and to traverse during the whole operation\
        Queue<String> existingQueue = new LinkedList<String>();\
        existingQueue.add(beginWord);\
        \
        //create a set that will be used to add the visited words to the list\
        Set<String> visited = new HashSet<>();\
        visited.add(beginWord);\
        \
        int change = 1;\
        //traverse the queue until it's empty\
        while(!existingQueue.isEmpty())\
        \{\
            //since the size will be changing while traversal we will keep on adding the element and polling it from the queue\
            int size = existingQueue.size();\
            for(int i=0; i<size; i++)\
            \{\
               //poll the word for creating all possible word combinations\
                String word = existingQueue.poll();\
                //compare if it's endword\
                if( word.equals(endWord)) return change;\
                // run the loop till the end of alphabets to replace eg: cog //'c','o','g'\
                for(int j=0; j<word.length(); j++)\
                \{\
                    // replace last 2 chars  with all alphabets\
                    for(int k='a' ; k<='z' ; k++)\
                    \{\
                        char[] arr = word.toCharArray();\
                        arr[j] = (char) k;\
                        \
                        String str = new String(arr);\
                        //compare whether the created word exists in the list\
                        if(set.contains(str) && !visited.contains(str))\
                        \{\
                            existingQueue.add(str);\
                            visited.add(str);\
                        \}\
                    \}\
                \}                   \
            \}\
            change++;\
           \
        \}\
    return 0;\
    \}\
   \
\}\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\
Time complexity: o(m^2 * n)\
Space complexity : o(m * n)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic.png \width20720 \height11400 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
}